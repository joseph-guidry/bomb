Name: Joseph Guidry
Date:	17 Nov 2017
Current Module: x86 Assembly
Project Name: bomb

Project Goals:
	<A two to three sentence description of the project and its intent>
	This project's goal is to help reinforce aspects of assembly language and techniques discussed about reverse engineering.
	With the use objdump and gdb, we can look into what a program is doing, without the use of all the files used to build the
	executable. Also a heavy emphasis is on a write up that clear communicates what was discovered and the process to make it to
	the next stages.

Considerations:
	<A bulleted list of considerations and conditions which affected the design of your project>
	- Disassemble the bomb executable with odjdump, getting output for the code and read-only segements of the program.
	- Determine what is being done at the assembly level to enter the phrase needed to move to the next stage.
	- Clearly document the steps taken to achieve any success.

Initial Design:
	<A paragraph or more that adequately describes your program's structure and layout discussing the various modules (.c and corresponding .h files) that you implemented>

	Prior to Stage 1:
	- Disassemble bomb into bomb.output - contains assembly instructions used.
							bomb.rodata - contains the read-only data, such as strings used in the program

	Test output of command line execution -> displays user with prompt "Stage 1:" and waits for input.
	Test output with gdb -> Produces a SIGSEGV and no output.

	Next step: Analyze the strings in the read-only data.

	Stage 1:
	===============================================================================================================================
	- After looking through the read-only data. A few of the strings seemed to standout. The beginning section of the 
	 memory adddresses 0x401820 thru 0x4018f7, are strings that are found in the bomb.c file. 

	The strings, starting at address 0x4018f8, "swordfish" is next. Without further inspection, I attempted this string as the first
	password, and it was successful and proceeded to Stage 2.
	

	Stage 2:
	===============================================================================================================================
	With the success of the first string, I attempted to investigate the next string "USER". 
	In the bomb.output, starting at memory address 0x400ea7, the program updates the stack pointer, and moves the address 0x401902,
	this is the string "USER", into the EDI register, and calls the getenv().  The return value is the username for whoever is 
	logged in.  
	
	  400eaf:	mov    QWORD PTR [rbp-0x8],rdi
	  400eb3:	mov    edi,0x401902						# Moves "USER" from read-only data to EDI register
	  400eb8:	call   400840 <getenv@plt>
	  400ebd:	mov    QWORD PTR [rip+0x201264],rax     # Return value for getenv("USER") = jguidry
	  400ec4:	mov    rdx,QWORD PTR [rip+0x20125d]     # Grabs "jguidry" 
	  400ecb:	mov    rax,QWORD PTR [rbp-0x8]			# Moves value of local variable 
	  400ecf:	mov    rsi,rdx
	  400ed2:	mov    rdi,rax
	  400ed5:	call   4008e0 <strcmp@plt>				# Test is both parameters are 0 ( equal).
	  400eda:	test   eax,eax							
	  400edc:	sete   al								# SETE looks for ZF = 0 to set return value as 1.

	The next instructions move a stored value into RDX, and compares it with the results that are in RAX. This is the reason "jguidry"
	was successful, and proceeded to Stage 3.
	
	Next step: Investigate the string format "%u", "%u %u %u %u %u" and "%c %d %c"

	Stage 3: 
	===============================================================================================================================
	Noticed a few complex shifts in how input was being used to compare the end result.

	The call to strncat, 0x400f12, puts the number entered appended by the username "jguidry", and the call to strlen, 0x400f1e, 
	returns the value that is used in the final comparison.  The call to sscanf, 0x400f43, converts the input to an number, and 
	begins a series of calculations. 

	After a few instructions, the MUL instruction, 0x400f6a, forces an overflow into the EDX register. This value is SHR, 0x400f6e, 
	and when cmp with the string length at the beginning.  I eventually guessed a large five digit number, that worked, 11111.

	SETA instruction changes the al register if the the appropriate registers are set, ZF = 0 and CF = 0, will return with 1.

	Stage 4:
	===============================================================================================================================
	The clue used for input was the function, sscanf(), which requires the string, "%u %u %u %u %u" from read-only data. 
	Thus indicating the need for five unsigned integers. The half portion of the code, gathers the input for the sscanf(), indicating
	by the cmp of the return value to 0x5 at memory address, 0x40100d, which will jump to an exit if not satisfied.

	If successful, at address 0x401019, the program enters a FOR loop, which initializes the variable to 0, and jumps to the condional
	at address, 0x401049. If condition is not meet, 0x4, the program will jump to 0x401023. In the body of the FOR loop:

	  401023: mov    rax,QWORD PTR [rbp-0x38]			# Move 0 into RAX
	  401027: mov    eax,DWORD PTR [rbp+rax*4-0x30]		# Move the value of index value to EAX
	  40102b: cmp    eax,DWORD PTR [rbp-0x3c]			# The first iteration [rbp-0x30] = 'j' or 106.
														# The first entry must be greater than 106
	  40102e: jbe    40103d <stage_4+0xa8>			
	  401030: mov    rax,QWORD PTR [rbp-0x38]			# If entry is greater, then RAX is set to 0
	  401034: mov    eax,DWORD PTR [rbp+rax*4-0x30]		# The entry value is loaded into EAX.
	  401038: add    DWORD PTR [rbp-0x3c],eax			# EAX is is added to the value stored 
														# at [rbp-0x30], which is 106 on the first iteration.
														# The minimum results is first entry (107) + 'j' (106 )  = 213.
	  40103b: jmp    401044 <stage_4+0xaf>
	  40103d: mov    eax,0x0
	  401042: jmp    401079 <stage_4+0xe4>				# This jumps to the end
	  401044: add    QWORD PTR [rbp-0x38],0x1			# Adds 1 to variable
	  401049: cmp    QWORD PTR [rbp-0x38],0x4			# Checks if variable <= 4 
	  40104e: jbe    401023 <stage_4+0x8e>

	This sequence of additions were troublesome, until the structure of a FOR loop was clear. This sequence iterates the entry into
	the value which starts with the integer value of the first letter of the USER name (jguidry). Once the loop has exited succesfully.
	The last entry is used to 

	  401050:	mov    ebx,DWORD PTR [rbp-0x3c]			# Moves the last entry into EBX.
	  401053:	mov    rax,QWORD PTR [rip+0x2010ce]     # Loads the username "jguidry" into RAX.
	  40105a:	mov    rdi,rax
	  40105d:	call   400880 <strlen@plt>
	  401062:	mov    rcx,rax							# The return value stored in RAX ( jguidry = 7 ).
	  401065:	mov    rax,rbx
	  401068:	mov    edx,0x0
	  40106d:	div    rcx								# Divides the last entry by the length of the username
	  401070:	mov    rax,rdx							# Moves the remainder portion into RAX. 
	  401073:	test   rax,rax							
	  401076:	sete   al								# If the test results in setting the ZF = 0, then SETE will put 1 in register al
													# which is used as the return value for this function.

	This last section deviates from how the other numbers were calculated, which requires that the last entry is both, double the value
	plus 1, and divisible by the length of the username(7). 

	For Stage 4, my values required starting with a value higher than 106 ('j') and the last entry is divisible by 7 ( strlen("jguidry") = 7)
	- 107, 215, 431, 863, 1729.

	Stage 5:
	===============================================================================================================================
	
	First thing when looking into stage five, there is another call to sscanf(), this time referencing the format "%c %d %c" at 
	0x4010c1, which is placed in the address of RBP-0x 24, 0x25, 0x26.

	Upon further inspection of the section starting at address 0x40110a:
	
	  40110a:	mov    rdx,QWORD PTR [rip+0x201017]        # start loop body. rdx <= move "j"
	  401111:	mov    rax,QWORD PTR [rbp-0x20]			   	#counter 	  rax <= counter_value
	  401115:	add    rax,rdx								# add letter + counter		
	  401118:	movzx  eax,BYTE PTR [rax]
	  40111b:	movsx  eax,al
	  40111e:	sub    eax,0x61								subtract to get the integer value past 'a'
	  401121:	cmp    eax,0x19								if less than 25 == lower case letter
	  401124:	ja     4011ff <stage_5+0x16c>				# invalid username value
	  40112a:	mov    eax,eax
	  40112c:	mov    rax,QWORD PTR [rax*8+0x401928]		# These are offsets in the read-only data
	  401134:	jmp    rax
	
	The instruction for the next jump address, is used by the offset of the letter in the USER name, in the read-only section.
	The jumps vary based on the lower case decimal value of the username, this is calculated during a FOR loop as it iterates through
	each character. 

	- TO BE CONTINUED!!!
	

Data Flow:
	<A paragraph or longer describing the data flow of the program in a sequential manner.  Include a diagram when necessary.>
	The data in this project is develop to be a progressively challenging puzzle to reverse engineer functions used based on the input give.
	Once the program is entered a specifc input is required to attempt the next stage. In-depth analysis is need to understand what
	is being done. 

Communication Protocol:
	<Discuss any custom communication protocol you have used including the various request and responses that may be sent and received.>
	No custom protocol is being used. 

Potential Pitfalls:
	<Discuss any potential issues that you might run into while creating the project>
	- New to the use of GDB.
	- Easy to become overwelmed by constant checking of registers at each step, to ensure correct output.
	- Losing track of registers through multiple iteration of FOR loop.

Test Plan:
	User Test:
 		<Describe the steps taken for each user test.>
		Stage 1:
			- Check read-only data, determine the reason for each string.
		Stage 2:
			- Continue with use of avaible string, especially if they are used by any function calls.
		Stage 3: 
			- Continue with string manipulation.
			- With use of unsigned int, begin brute force to find a number that will work.
		Stage 4:
			- Continue with string manipulation.
			- Reconstruct looping build, identifying variables used. and how it progressed
	Test Cases:
		<A brief overview of the test cases that you implemented.>
		-use any single word strings
		-look at function calls within stage funciton
		-attempt to rebuild construct of function.

Conclusion:
	<A review of the project, what worked, what didn’t and how to improve upon your project in the future.>
	I found this project to exceptable in that the difficulty managed to exceed my experience early in the stages. 



